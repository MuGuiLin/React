{"version":3,"sources":["static/img/logo.svg","components/Menu.js","views/Home.js","views/About.js","views/Self.js","components/Item.js","components/page.js","views/Goods.js","views/View.js","views/Cart.js","views/Login.js","views/NotFound.js","views/App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","props","state","show","menu","name","href","console","log","window","location","hash","this","map","item","index","key","to","exact","activeClassName","React","Component","Home","sendData","age","sex","job","h5","dom","js","es","className","src","logo","alt","target","rel","About","Self","Item","sort","id","price","toFixed","Page","page","pages","toggle","bind","e","p","history","Array","fill","o","i","type","defaultValue","onKeyDown","value","keyCode","push","currentTarget","mupiao","withRouter","Goods","items","sortVal","order","goods","a","b","dir","setState","search","URLSearchParams","get","onChange","getUrlPar","View","taobao","goods_id","match","params","data","find","Number","onClick","goBack","image","Cart","Login","NotFound","myUser","myGoods","App","Fragment","path","render","component","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bb30ff3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport '../static/css/menu.css';\r\n\r\nimport { Link, NavLink} from 'react-router-dom';\r\n\r\nexport default class Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            show: '/',\r\n            menu: [{\r\n                name: '首 页',\r\n                href: '/'\r\n            }, {\r\n                name: '关 于',\r\n                href: '/about/666'\r\n            }, {\r\n                name: '商 品',\r\n                href: '/goods'\r\n            }, {\r\n                name: '购物车',\r\n                href: '/cart'\r\n            }, {\r\n                name: '我 的',\r\n                href: '/self'\r\n            }]\r\n        }\r\n    };\r\n\r\n    render() {\r\n        console.log('location对象：', window.location, '--------------------哈希：',window.location.hash);\r\n\r\n        return (\r\n            <menu>\r\n                <h1>React-Router</h1>\r\n                <hr></hr>\r\n                <nav>\r\n                    {\r\n                        /*\r\n                        1、HashRouter 哈希方式 注：用 <a>标签 来跳转页面时，要在index.js中把内容组件换成<HashRouter><App /></HashRouter>包起来才行哦！\r\n                        <a href=\"#/\">首 页</a>\r\n                        <a href=\"#/about\">关 于</a>\r\n\r\n                        2、BrowserRouter 历史记录方式 注：用 <a>标签 来跳转页面时，要在index.js中把内容组件换成<BrowserRouter><App /></BrowserRouter>包起来才行哦！\r\n                        <a href=\"/\">首 页</a>\r\n                        <a href=\"/about\">关 于</a>\r\n                        【注：这里有个坑哦，如果在BrowserRouter方式中 用<a>标签来跳转页面时，请仔细看（整个页面都刷新了）哦！！】 所以就有了下面的第3种Link方式啦！\r\n\r\n                        3、Link 以上两种方式都可以 注：用 <Link />组件 来跳转页面时，就没所谓了用HashRouter，BrowserRouter都行！其是<Link to=\"\"/>最终也是<a href=\"\">，但<Link/>不会刷新整个页面（因为<Link/>组件重新定义(代理、监听)了<a>标签跳事件[添加了click方法]，并阻止<a>标签的默认跳转事件，可以打开浏览器控制台，选择Elements选项卡，再选中<a>标签，然后看中的Event Listeners面板就可以看到dom所绑定的相关事件啦）！\r\n                        <Link className=\"App-link\" to=\"#/about\">关 于</Link>\r\n                        <Link className=\"App-link\" to=\"/about\">关 于</Link>\r\n                    */\r\n                    }\r\n                    <a href=\"/\">刷 新</a>\r\n                    {\r\n                        this.state.menu.map((item, index) => {\r\n                            //原生<a>标签跳转\r\n                            // return <a href={item.href} className={item.href == this.state.show ? 'show' : ''}>{item.name}</a>\r\n\r\n                            // <Link/>组件跳转，无高亮状态\r\n                            // return <Link to={item.href} className={item.href == this.state.show ? 'show' : ''}>{item.name}</Link>\r\n\r\n                            /* <NavLink/>导航跳转，有高亮状态有3个参数：\r\n                                - isActive 是一个回调函数，返回布尔值 【注：默认情况下，匹配的是URL与to的设置，当有子页面或孙子页面也要高亮时，就需要这个来自定义啦】 如：isActive={() =>{}}\r\n                                - activeStyle 高亮状态的样式 如：activeStyle={{color: 'red'}}\r\n                                - activeClassName 高亮状态的的className 如：activeClassName={'show'}\r\n\r\n                                以上的触发条件是：当URL中的路由和 to={}中的路由相同时触发【注：/ 是所有路由都会匹配成功能（因为默认是模糊匹配），所以要改为精确匹配：exact={true} 或 直接exact都行  https://reacttraining.com/react-router/web/api/NavLink/exact-bool】 \r\n                            */\r\n                            return <NavLink key={item.href} to={item.href} exact={true} activeClassName={'show'}>{item.name}</NavLink>\r\n\r\n                            // 当有子页面或孙子页面也要亮时，就是能用上面的默认条件了，需要自己添加条件\r\n                            // return <NavLink key={item.href} to={item.href} exact={true} isActive={(match, locat) => {\r\n                            //     console.log('当前匹配路径：',match, '当前URL中的信息：',locat);\r\n                            //     return  match || locat.pathname.startsWith('/view') ? true : false;\r\n                            // }}>{item.name}</NavLink>\r\n                        })\r\n                    }\r\n                </nav>\r\n            </menu>\r\n        );\r\n    }\r\n};","import React from 'react';\r\nimport logo from '../static/img/logo.svg';\r\nimport '../static/css/home.css';\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // 第1种、接收父级参数方式 初始1次 【注：父级传过来的参数都是单向的，也就是只能读，不能改】\r\n            name: this.props.sendData.name || '',\r\n            age: this.props.sendData.age || ''\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        console.log('单向数据流：this.props', this.props);\r\n        // 第2种、接收父级参数方式 在render中接收 【注：render函数 在当数据每变化1次时，会重新(执行一次render函数)渲染1次】\r\n        let { sex, job: { h5, js: { dom }, es } } = this.props.sendData;\r\n\r\n        return (\r\n            <header className=\"App-header\">\r\n\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n                <p>{this.state.name} <code>{this.state.age}</code> {sex} {h5}，{dom}，{es}  <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">Learn React</a></p>\r\n\r\n                <pre>\r\n                    <h3>路由：</h3>\r\n                        当应用变得复杂的时候，就需要分块的进行处理和展示，传统模式下，我们是把整个应用分成了多个页面，然后通过 <u>URL</u> 进行连接。但是这种方式也有一些问题，每次切换页面都需要重新发送所有请求和渲染整个页面，不止性能上会有影响，同时也会导致整个 <u>JavaScript</u> 重新执行，丢失状态。\r\n                    \r\n                    <h4> SPA 单页应用：</h4>\r\n                        根据不同的URL的变化（用哈希路由、历史记录等方式去监听URL的变化）时，显示并渲染我们指定对应的各个组件(页面)，而这个过程不会发生整个页面的刷新一种页面切换机制，因为这个过程就只是在一个页面中完成的，所以叫：单页面！！！\r\n\r\n                    <h4>组件按视图可分为2种：</h4>\r\n                        1、页面组件（视图组件）一般情况下，一个页面组件就是一个完整的页面，并且页面组件可以包涵功能组件\r\n                        2、功能组件 是一个具有一功能的，可复用的组件，如：弹出框，轮播图，柱状图，数据过滤、格式化，状态管理等，它可分为2种：\r\n                            a、带视图的功能组件，如：弹出框，轮播图，柱状图等。\r\n                            b、不带视图、只操作数据的功能组件，如：数据过滤、格式化，状态管理等。\r\n\r\n                    <h4>组件存放目录：</h4>\r\n                        1、页面组件一般是放在src目录下的views目录中\r\n                        2、功能件件一般是放在src目录下的components目录中\r\n                </pre>\r\n                \r\n            </header>\r\n        );\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class About extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    };\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        return(\r\n            <section className=\"views-box\">\r\n                <h1>关于我</h1>\r\n                <hr></hr>\r\n\r\n\r\n            </section>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class Self extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    };\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        return(\r\n            <section className=\"views-box\">\r\n                <h1>个人中心</h1>\r\n                <hr></hr>\r\n\r\n\r\n            </section>\r\n        )\r\n    }\r\n};","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Item extends React.Component {\r\n    // class Item extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    };\r\n\r\n    render() {\r\n        const { item, sort } = this.props;\r\n        return (\r\n            <li>\r\n                <span>{item.id}</span>\r\n                {/* 由于路由设置了中能传数字，所以这里不能传字符串 */}\r\n                {/* <Link to={'/view/' + item.name}>{item.name}</Link> */}\r\n\r\n                <Link to={'/view/' + item.id + '?sort=' + sort}>{item.name}</Link>\r\n                <span>￥{(item.price / 100).toFixed(2)}</span>\r\n                <span>\r\n                    <button>详情信息</button>\r\n                </span>\r\n            </li>\r\n        )\r\n    }\r\n};\r\n\r\n// export default {\r\n//     Item\r\n// };","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom'\r\n\r\nclass Page extends React.Component {\r\n    static mupiao = {\r\n        page: 1,\r\n        pages: 8,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            page: this.props.page || 1,\r\n            pages: this.props.pages || 6\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n    };\r\n\r\n    toggle(e, p) {\r\n        console.log(e, p)\r\n    };\r\n\r\n    render() {\r\n\r\n        let { history, pages, page } = this.props;\r\n        // console.log(this.props, pages, page);\r\n        \r\n        return (\r\n            <ul className=\"Pagination\">\r\n\r\n                {\r\n                    /* <li><a noClick={e => { this.toggle(e, 'prev') }}>上一页</a></li> */\r\n                    page > 1 && <li><Link to={'/goods/?page=' + (page - 1)} >上一页</Link></li>\r\n                }\r\n\r\n                {\r\n                    (new Array(pages)).fill('').map((o, i) => {\r\n                        return <li key={++i}><Link to={'/goods/?page=' + i} className={i == page ? 'active' : ''} >{i}</Link></li>\r\n                    })\r\n                }\r\n\r\n                {\r\n                    /* <li><a noClick={e => { this.toggle(e, 'next') }}>下一页</a></li> */\r\n                    page < pages && <li><Link to={'/goods/?page=' + (page - 0 + 1)} >下一页</Link></li>\r\n                }\r\n\r\n                <li className=\"number\">前往<input type=\"number\" defaultValue={page} onKeyDown={e => {\r\n                    if (e.target.value && 13 == e.keyCode) {\r\n                        history.push('/goods/?page=' + e.currentTarget.value);\r\n                        // history.go();\r\n                        // this.props.history.go()可以进行组件刷新，go括号里面填的是数字，代表前一页和后一页，这个特点就是刷新！\r\n                    }\r\n                }} />页</li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * 注：如果没有用withRouter() 的话，需要在父组件中把history={this.props.history}传过来哦，\r\n */\r\n// export default Page;\r\n\r\n/**\r\n * withRouter 是react-router-dom中的一个高阶组件，它会把路由的相关对象（history、location、match、staticContext）注入到对应所包裹组件的props对象中，并返回一个带有路由相关对象的，原来的组件\r\n */\r\nexport default withRouter(Page);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Item from \"../components/Item\";\r\nimport Page from \"../components/page\";\r\n\r\nimport '../static/css/goods.css';\r\n\r\nexport default class Goods extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: this.sort(),  //初始化数据\r\n            sortVal: 'asc'\r\n        }\r\n        this.order = this.order.bind(this);\r\n\r\n    };\r\n\r\n    //数据排序\r\n    sort(type = 'asc') {\r\n        return this.props.goods.items.sort((a, b) => {\r\n            return 'desc' == type ? b.price - a.price : a.price - b.price;\r\n        });\r\n    };\r\n\r\n    order(e) {\r\n        console.dir(e.target.value);\r\n\r\n        this.setState({\r\n            sortVal: e.target.value,\r\n            items: this.sort(e.target.value)\r\n        });\r\n    };\r\n\r\n    getUrlPar() {\r\n        // 获取url地址?后面的参数: URLSearchParams()类，是原生中用于解析queryString的一个构造函数，实例化可通过get('参数名')，获取到对应的url参数值\r\n        // 获取url地址?后面的参数：还可以用 npm 中的qs模块https://www.npmjs.com/package/qs\r\n        \r\n        let search = window.location.search;\r\n        let qs = new URLSearchParams(search);\r\n        return qs.get('page') || 1;\r\n    };\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        let items = this.state.items;\r\n\r\n        return (\r\n            <section className=\"views-box\">\r\n                <h1>商品列表</h1>\r\n                <hr></hr>\r\n\r\n                <div>\r\n                    <b>排序方式：</b>\r\n                    <select value={this.state.sortVal} onChange={this.order}>\r\n                        <option value=\"asc\">-- 请选择（默认升序） --</option>\r\n                        <option value=\"asc\"> 升 序 </option>\r\n                        <option value=\"desc\"> 降 序 </option>\r\n                    </select>\r\n                </div>\r\n                <ul className=\"item-list\">\r\n                    <li className=\"head\">\r\n                        <span>序号</span>\r\n                        <span>名称</span>\r\n                        <span>价格</span>\r\n                        <span>操作</span>\r\n                    </li>\r\n                    {\r\n                        // items.map((item, index) => {\r\n                        //     return (<li key={item.id}>\r\n                        //         <span>{item.id}</span>\r\n                        //         <Link to={'/view/' + item.id}>{item.name}</Link>\r\n                        //         <span>￥{(item.price / 100).toFixed(2)}</span>\r\n                        //         <span>\r\n                        //             <button>详情信息</button>\r\n                        //         </span>\r\n                        //     </li>)\r\n                        // })\r\n\r\n                        // 将列表拆分为一个独立的功能组件\r\n                        items.map((item, index) => <Item key={item.id} item={item} sort={this.state.sortVal} ></Item>)\r\n                    }\r\n                </ul>\r\n                <hr></hr>\r\n                {/* <Page history={this.props.history} pages={10} page={this.state.page} ></Page> */}\r\n                <Page pages={6} page={this.getUrlPar()}></Page>\r\n            </section>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nimport '../static/css/goods.css';\r\n\r\nexport default class View extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.taobao = this.taobao.bind(this);\r\n    };\r\n\r\n    taobao(e) {\r\n        let { history } = this.props\r\n        console.dir(history);\r\n        // history.push('https://www.taobao.com/search?q=苹果');\r\n        history.push('/goods/?sort=' + this.getUrlPar());\r\n    };\r\n\r\n    getUrlPar() {\r\n        // 获取url地址?后面的参数: URLSearchParams()类，是原生中用于解析queryString的一个构造函数，实例化可通过get('参数名')，获取到对应的url参数值\r\n        // 获取url地址?后面的参数：还可以用 npm 中的qs模块https://www.npmjs.com/package/qs\r\n        \r\n        let search = this.props.location.search || window.location.search;\r\n        let qs = new URLSearchParams(search);\r\n        let sort = qs.get('sort');\r\n        // console.log(sort)\r\n        return sort;\r\n    };\r\n\r\n    render() {\r\n        /*\r\n            获取路由相关参数(this.props)：【注：如果组件是一个路由组件（就是路由渲染时，是直接访问组件，而不是渲染组件）】。\r\n                路由组件component中的参数（注：视图组件是在render()中！）：\r\n                    - history 里面包括的返回上一个页面的方法goBack()\r\n                    - location 和原生的location一样\r\n                    - match 当前页面路由的相关信息\r\n                    - staticContext\r\n\r\n            路由传递过来的数据都在this.props中（props是一个单向数据流，只读的）将其解后就可以得到对应的数据了。\r\n\r\n            获取url地址?后面的参数(this.props.location.search 或 原生js window.location.search)\r\n\r\n\r\n            组件之间的通信方式：\r\n                - 通过url与props（常用）\r\n                - 通过本地存储\r\n                - 通过全局变量(内存)如：window, react.global【注：仅能在单页面应用中使用】\r\n            \r\n            数据通信：\r\n                - ajax 调后端API获取数据库数据。\r\n        */\r\n\r\n        console.log('商品详情：', this.props);\r\n\r\n        // 解构从父组件传过来的相关数据\r\n        let { history, location, match: { params: { goods_id } }, data } = this.props;\r\n        // console.log(this.props, goods_id, data);      \r\n\r\n        // 根据传过来的id找到对应的商品\r\n        let item = data.items.find((o, i) => o.id === Number(goods_id));\r\n        // console.log(item);\r\n\r\n        return (\r\n            <section className=\"views-box\">\r\n                <h1>商品详情</h1>\r\n                <hr></hr>\r\n\r\n                <div className=\"info-box\">\r\n                    <h2>{item.name}\r\n                        <button onClick={this.taobao}>带参返回</button>\r\n                        <button onClick={history.goBack}>纯返回</button>\r\n                    </h2>\r\n                    <p>ID：{goods_id}</p>\r\n                    <p>排序：\r\n                        {/* 非受控组件 默认值初始化 defaultValue */}\r\n                        <select defaultValue={this.getUrlPar()}>\r\n                            <option value=\"asc\"> 升 序 </option>\r\n                            <option value=\"desc\"> 降 序 </option>\r\n                        </select>\r\n                    </p>\r\n                    <p><img src={item.image} /></p>\r\n                    <p>\r\n                        <i>RMB：</i>\r\n                        <b>{(item.price / 100).toFixed(2)}</b>\r\n                    </p>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class Cart extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <section className=\"views-box\">\r\n                <h1>购物车</h1>\r\n                <hr></hr>\r\n            </section>\r\n        );\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"views-box\">\r\n                <h1>登录</h1>\r\n                <hr></hr>\r\n\r\n                <div className=\"login\">\r\n                    <form>\r\n                        <p>用户：<input type=\"text\"></input></p>\r\n                        <p>密码：<input type=\"password\"></input></p>\r\n                        <p><button>登 录</button></p>\r\n                    </form>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n};","import React from 'react';\r\n\r\nexport default class NotFound extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"not-found\">\r\n                <h1>Not-Found 404</h1>\r\n            </section>\r\n        )\r\n    };\r\n};","import React from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\n\r\nimport Menu from '../components/Menu';\r\n\r\nimport Home from '../views/Home';\r\nimport About from '../views/About';\r\nimport Self from '../views/Self';\r\nimport Goods from '../views/Goods';\r\nimport View from \"../views/View\";\r\nimport Cart from \"../views/Cart\";\r\nimport Login from \"../views/Login\";\r\nimport NotFound from \"../views/NotFound\";\r\n\r\nimport '../static/css/App.css';\r\n\r\nconst myUser = {\r\n  // name: '沐枫',\r\n  age: 28,\r\n  sex: '男',\r\n  job: {\r\n    h5: 'HTML5，CSS3, ES6, TS3',\r\n    js: {\r\n      dom: 'Node.Js'\r\n    },\r\n    es: 'Web 前端开发'\r\n  },\r\n}\r\n\r\nconst myGoods = {\r\n\r\n  items: [\r\n    {\r\n      id: 1,\r\n      name: 'iPhone XR',\r\n      price: 542500,\r\n      image: 'http://img.yzcdn.cn/upload_files/2018/10/02/FoDSUZxgvASb3gkEcY49s7G8rP5X.jpg?imageView2/2/w/580/h/580/q/75/format/jpg'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Apple iPad Air 3',\r\n      price: 377700,\r\n      image: 'http://5b0988e595225.cdn.sohucs.com/q_70,c_zoom,w_640/images/20190322/bf58e2bfc02049938ed53ca3a225faf2.jpg'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Macbook Pro 15.4',\r\n      price: 1949900,\r\n      image: 'http://pic7.58cdn.com.cn/zhuanzh/n_v1bkuymcyzthvvqylqifza_750_0.jpg'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Apple iMac',\r\n      price: 1629900,\r\n      image: 'http://news.mydrivers.com/img/20091122/02404674.jpg'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Apple Magic Mouse',\r\n      price: 72900,\r\n      image: 'http://img4.imgtn.bdimg.com/it/u=3557298481,916986847&fm=26&gp=0.jpg'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Apple Watch Series 4',\r\n      price: 599900,\r\n      image: 'http://wx2.sinaimg.cn/wap720/a7807f15ly1fwp3z56uiuj21bh0qogsq.jpg'\r\n    }\r\n  ]\r\n}\r\n\r\n/*\r\n 路由：\r\n      当应用变得复杂的时候，就需要分块的进行处理和展示，传统模式下，我们是把整个应用分成了多个页面，然后通过URL进行连接。但是这种方式也有一些问题，每次切换页面都需要重新发送所有请求和渲染整个页面，不止性能上会有影响，同时也会导致整个JavaScript重新执行，丢失状态。\r\n\r\n  SPA 单页应用：\r\n      根据不同的URL的变化（用哈希路由、历史记录等方式去监听URL的变化）时，显示并渲染我们指定对应的各个组件(页面)，而这个过程不会发生整个页面的刷新，因为这个过程就只是在一个页面中完成的，所以叫：单页面！！！\r\n\r\n  组件按视图可分为2种：\r\n      1、页面组件（视图组件）一般情况下，一个页面组件就是一个完整的页面，并且页面组件可以包涵功能组件\r\n      2、功能组件 是一个具有一功能的，可复用的组件，如：弹出框，轮播图，柱状图，数据过滤、格式化，状态管理等，它可分为2种：\r\n          a、带视图的功能组件，如：弹出框，轮播图，柱状图等。\r\n          b、不带视图、只操作数据的功能组件，如：数据请求、过滤、格式化，状态管理等。\r\n\r\n  组件存放目录：\r\n      1、页面组件一般是放在src目录下的views目录中\r\n      2、功能件件一般是放在src目录下的components目录中\r\n*/\r\n\r\nfunction App() {\r\n\r\n  return (<React.Fragment>\r\n\r\n    <section className=\"page-menu\">\r\n      <Menu></Menu>\r\n    </section>\r\n\r\n\r\n\r\n    <section className=\"page-main\">\r\n\r\n      {/*********** 路由跳转方式 导航 ************/}\r\n      {\r\n        /* \r\n          <nav>\r\n            1、HashRouter 容器组件、路由根组件（哈希方式） 注：用 <a>标签 来跳转页面时，要在index.js中把内容组件换成<HashRouter><App /></HashRouter>包起来才行哦！\r\n            <a href=\"#/\">首 页</a>\r\n            <a href=\"#/about\">关 于</a>\r\n \r\n \r\n            2、BrowserRouter 容器组件、路由根组件（历史记录方式） 注：用 <a>标签 来跳转页面时，要在index.js中把内容组件换成<BrowserRouter><App /></BrowserRouter>包起来才行哦！\r\n            <a href=\"/\">首 页</a>\r\n            <a href=\"/about\">关 于</a>\r\n            【注：这里有个坑哦，如果在BrowserRouter方式中 用<a>标签来跳转页面时，请仔细看（整个页面都刷新了）哦！！】 所以就有了下面的第3种Link方式啦！\r\n \r\n            \r\n            3、Link 以上两种方式都可以 注：用 <Link />组件 来跳转页面时，就没所谓了用HashRouter，BrowserRouter都行！其是<Link to=\"\"/>最终也是<a href=\"\">，但<Link/>不会刷新整个页面（因为<Link/>组件重新定义(代理、监听)了<a>标签跳事件[添加了click方法]，并阻止<a>标签的默认跳转事件，可以打开浏览器控制台，选择Elements选项卡，再选中<a>标签，然后看中的Event Listeners面板就可以看到dom所绑定的相关事件啦）！\r\n            <Link className=\"App-link\" to=\"#/about\">关 于</Link>\r\n            <Link className=\"App-link\" to=\"/about\">关 于</Link>\r\n          </nav>\r\n \r\n          注：这里为了使代码更简洁、更优雅，把上面的导航拆分到components功能组件里的Mnue.js组中了。\r\n        */\r\n      }\r\n\r\n\r\n\r\n      <Switch>\r\n        {/*********** 组件渲染方式 <Route/> 路由组件映射  ************/}\r\n        {\r\n          // hash路由：根据URL变化，显示不同页面的原理，所以用react-router-dom中的<Route/>来配置url 与 组件的映射关系（就是根url显示对应的组件的意思，也就是把路由 和 组件关联起来）注：path=\"\"要一一对应哦！！\r\n          // window.location.hash == '#/self' && <Self />\r\n        }\r\n\r\n        {/* 第1种、页面渲染方式 - 纯展示 没有路由 */}\r\n        {/* <Home/> */}\r\n        {/* <About></About> */}\r\n\r\n\r\n        {/* 第2种、页面路由渲染方式 - 有路由，但不能传参 【注：path=\"路由地址\" component={要显示的组件}】*/}\r\n        {/* <Route path=\"/\" component={Home}></Route> */}\r\n        {/* <Route /> 中的常用属性：path=\"\"，exact，component={}，render={()=>{}} */}\r\n\r\n\r\n        {/* 第3种、页面路由渲染方式 - 有路由，可以传参 【注：path=\"/\" 时，对应的页面会一直显示，所以要加 exact 表示唯一（exact 精确路由配置）】 */}\r\n        <Route path=\"/\" exact render={() => {\r\n          return <Home sendData={myUser}></Home>\r\n        }}></Route>\r\n\r\n\r\n        {/* 第4种、页面路由渲染方式 - 有路由，可以传参，并可以在路由中传参(动态路由传参) 注：在 /: 后面就是参数名，这是要在<Link/>中去设置参数值哦！！ */}\r\n        <Route path=\"/about/:mupiao\" render={() => {\r\n          return <About data={myUser}></About>\r\n        }}></Route>\r\n\r\n\r\n        {/* 上面第4种的简写 */}\r\n        <Route path=\"/self\" render={() => <Self data={myUser}></Self>} />\r\n\r\n\r\n        <Route path=\"/goods\" render={(props) => {\r\n          return <Goods history={props.history} goods={myGoods} ></Goods>\r\n        }}></Route>\r\n\r\n\r\n        {/* (动态路由传参) 注：在 /: 后面就是参数名，这是要在<Link/>中去设置参数值,(\\d+) 是正则，表示传递的参数是只能是数字 */}\r\n        {/* <Route path=\"/view/:goods_id(\\d+)\" component={View} /> */}\r\n\r\n        {/* 由于除了要向View组件传goods_id以外，还要传一些其他数据，所以有要用到render() */}\r\n        <Route path=\"/view/:goods_id(\\d+)\" render={(props) => {\r\n          // props参数中的值\r\n          // - history 里面包括的返回上一个页面的方法goBack()\r\n          // - location 和原生的location一样\r\n          // - match 当前页面路由的相关信息\r\n          // - staticContext\r\n          console.log(props)\r\n          // return <View history={props.history} location={props.location} match={props.match} data={myGoods}></View>\r\n\r\n          // 由于上面这种传递的数据太多，写起来复杂，所以可以像下面这样简写 解构\r\n          return <View {...props} data={myGoods} ></View>\r\n        }} />\r\n\r\n        {/* <Route path=\"/cart\" component={Cart}></Route> */}\r\n\r\n        {/* 判断否登录：如登录则显示购物车，否则就重定向到登录页面 */}\r\n        <Route path=\"/cart\" component={() => {\r\n          if (myUser.name) {\r\n            return <Cart />\r\n          } else {\r\n            // return <Login />\r\n            // 重定向\r\n            return <Redirect to=\"/login\" />\r\n          }\r\n        }}></Route>\r\n\r\n        <Route path=\"/login\" component={Login}></Route>\r\n\r\n\r\n\r\n        {/* 注：如果不设置path=\"\"路由，会匹配所有页面，就相当于switch()所以case:都没有break;一样会向下穿透！！ 所以用<Switch>后，一般404页面的<Route>都放到最下面，其他的<Route>放到前面*/}\r\n        <Route component={NotFound}></Route>\r\n\r\n      </Switch>\r\n    </section>\r\n\r\n  </React.Fragment>);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\n\r\n/*\r\n    react-router-dom中的容器组件：用于包裹URL所对应的【根组件】，【容器组件是最顶上，最外层的组件】有以下5种： 一般<BrowserRouter> 和 <HashRouter> 用得多一点，当然也要看业务场景！！\r\n        1、<BrowserRouter>\r\n        2、<HashRouter>\r\n        3、<MemoryRouter>\r\n        4、<NativeRouter>\r\n        5、<StaticRouter>\r\n*/\r\n\r\nimport './static/css/index.css';\r\nimport App from './views/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    // 历史记录路由方式 - 有历史记录 基于HTML5的\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n\r\n    // 哈希路由方式 - 无历史记\r\n    // <HashRouter>\r\n    //     <App />\r\n    // </HashRouter>\r\n    \r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}